1.



#include<iostream>
using namespace std;
class Shape
{
protected:

    double x ;
    double y;
    double area;
   public:
       void set_data(double a,double b)
       {
           x=a;
           y=b;
       }
       virtual void cal_area()=0;



};
class Rectangle: public Shape
{

public:
     void cal_area()
    {
     area=x*y;
    }
    void display()
    {
        cout<<"Area of Rectangle is "<<area<<endl;
    }
};
class Triangle: public Shape
{
    public:
      void  cal_area()
    {
         area=0.5*x*y;
    }
      void display()
    {
        cout<<"Area of  Triangle is "<<area<<endl;
    }
};

int main()
{
    Rectangle r;
    r.set_data(5,4);
    r.cal_area();
    r.display();
      Triangle t;
    t.set_data(5,4);
    t.cal_area();
    t.display();

    return 0;
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



2.

#include<iostream>
using namespace std;
class Shape
{
protected:

    double x ;
    double y;
    double area;
   public:
       void get_data(double a,double b=0)
       {
           x=a;
           y=b;
       }
       virtual void display_area()=0;



};
class Rectangle: public Shape
{

public:
     void display_area()
    {
     area=x*y;
    }
    void display()
    {
        cout<<"Area of Rectangle is "<<area<<endl;
    }
};
class Triangle: public Shape
{
    public:
      void  display_area()
    {
         area=0.5*x*y;
    }
      void display()
    {
        cout<<"Area of  Triangle is "<<area<<endl;
    }
};
class Circle:public Shape
{
     public:
      void  display_area()
    {
         area=3.14*x*x;
    }
      void display()
    {
        cout<<"Area of  Circle is "<<area<<endl;
    }

};
int main()
{
    Rectangle r;
    r.get_data(5,4);
    r.display_area();
    r.display();
    Triangle t;
    t.get_data(5,4);
    t.display_area();
    t.display();
    Circle c;

    c.get_data(5);
    c.display_area();
    c.display();

    return 0;
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3.


#include<iostream>
using namespace std;
class A
{
    int n;
public:
    A(int a)
    {
        n=a;
    }
    void display()
    {
        cout<<"Value is "<<n<<endl;

    }
    void swap(A* num)
    {
        int t;
        t=n;
        n=num->n;
        num->n=t;
    }
};
int main()
{
    A s1(10);
    A s2(20);
    cout<<"Value before swap"<<endl;
    s1.display();
    s2.display();

    s1.swap(&s2);
    cout<<"Value After swap"<<endl;
     s1.display();
    s2.display();

    return 0;
}





























+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4.


#include<iostream>
using namespace std;
class Shape
{
protected:

    double x ;
    double y;
    double area;
   public:
       void get_data(double a,double b=0)
       {
           x=a;
          y=b;
       }
       virtual void display_area()=0;



};
class Rectangle: public Shape
{

public:
     void display_area()
    {
     area=x*y;
    }
    void display()
    {
        cout<<"Area of Rectangle is "<<area<<endl;
    }
};
class Triangle: public Shape
{
    public:
      void  display_area()
    {
         area=0.5*x*y;
    }
      void display()
    {
        cout<<"Area of  Triangle is "<<area<<endl;
    }
};
class Circle:public Shape
{
     public:
      void  display_area()
    {
         area=3.14*x*x;
    }
      void display()
    {
        cout<<"Area of  Circle is "<<area<<endl;
    }

};
int main()
{
    Rectangle r;
    r.get_data(5,4);
    r.display_area();
    r.display();
    Triangle t;
    t.get_data(5,4);
    t.display_area();
    t.display();
    Circle c;

    c.get_data(5);
    c.display_area();
    c.display();

    return 0;
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
5.


#include<iostream>
using namespace  std;
#define h  6.62607015e-34 // Planck's constant
#define c  299792458 // Speed of light
class Photon
{
protected:

     double Wavelength;
 public:
    set_wav(double w)
    {
        Wavelength=w;
    }
};
class photon_energy: public Photon
{
    double E;
public:
    void cal_energy()
    {
          E = (h * c) / Wavelength; // Photon energy
    }
    void display()
    {
        cout<<"Energy = "<<E<<endl;
    }
};
int main()
{
    photon_energy p;
    p.set_wav(3636);
    p.cal_energy();
    p.display();
    return 0;
}



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
6.



#include<iostream>
using namespace std;
class Shape
{
protected:

    double x ;
    double y;
    double area;
   public:
       void get_data(double a,double b=0)
       {
           x=a;
           y=b;
       }
       virtual void display_area()=0;



};
class Rectangle: public Shape
{

public:
     void display_area()
    {
     area=x*y;
    }
    void display()
    {
        cout<<"Area of Rectangle is "<<area<<endl;
    }
};
class Triangle: public Shape
{
    public:
      void  display_area()
    {
         area=0.5*x*y;
    }
      void display()
    {
        cout<<"Area of  Triangle is "<<area<<endl;
    }
};
class Circle:public Shape
{
     public:
      void  display_area()
    {
         area=3.14*x*x;
    }
      void display()
    {
        cout<<"Area of  Circle is "<<area<<endl;
    }

};
int main()
{
    Rectangle r;
    r.get_data(5,4);
    r.display_area();
    r.display();
    Triangle t;
    t.get_data(5,4);
    t.display_area();
    t.display();
    Circle c;

    c.get_data(5);
    c.display_area();
    c.display();

    return 0;
}



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


7.


#include<iostream>
using namespace std;
class Matrix
{
protected:

   int m[5][5];
   public:
       void accept()
       { cout<<"Enter 4 values "<<endl;
           for(int i=0;i<=1;i++)
           {
               for(int j=0;j<=1;j++)
               {
                   cin>>m[i][j];
               }
           }
       }
};
class calculate_determinant:public Matrix
{
    int det=0;
public:
    void cal_det()
    {
        det=((m[0][0]*m[1][1])-(m[0][1]*m[1][0]));
    }
    void display()
    {
        cout<<"Determinant = "<<det<<endl;
    }
};

int main()
{
    calculate_determinant d;
    d.accept();
    d.cal_det();
    d.display();

    return 0;
}



































+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
8.

#include<iostream>
using namespace std;
class Proof
{
protected:

    int p;
    int b;
public:
    void set_data(int a,int k)
    {
        p=a;
        b=k;
    }
};
class compute:public Proof
{
    int h;
public:
    void set_h(int l)
    {
        h=l;
    }
    void check()
    {
        if( (h*h)==((p*p)+(b*b)))
        {
            cout<<" It  is Right Angle Triangle " <<endl;
        }
        else
        {
            cout<<"  It is not  Right Angle Triangle  "<<endl;
        }

    }
};
int main()
{
    compute c;
    c.set_data(4,3);
    c.set_h(5);
    c.check();
    return 0;
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



9.


#include<iostream>
using namespace std;
class Volume
{
protected:

    double x ;
    double y;
    double vol;
   public:
       void get_data(double a,double b=0)
       {
           x=a;
           y=b;
       }
       virtual void display_volume()=0;



};
class cube: public Volume
{

public:
     void display_volume()
    {
     vol=x*x*x;
    }
    void display()
    {
        cout<<"Volume of cube is "<<vol<<endl;
    }
};
class sphare: public Volume
{
    public:
      void  display_volume()
    {
         vol=(4/3)*x*x*x*3.14;
    }
      void display()
    {
        cout<<"Volume of Sphare is "<<vol<<endl;
    }
};

int main()
{
    cube r;
    r.get_data(5);
    r.display_volume();
    r.display();
   sphare  t;
    t.get_data(5);
    t.display_volume();
    t.display();


    return 0;
}





+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


10.


#include<iostream>
using namespace std;
class Shape
{
protected:

    double x ;
    double y;
    double area;
   public:
       void get_data(double a,double b=0)
       {
           x=a;
           y=b;
       }
       virtual void display_area()=0;



};
class square: public Shape
{

public:
     void display_area()
    {
     area=x*x;
    }
    void display()
    {
        cout<<"Area of Square is "<<area<<endl;
    }
};
class parallelogram: public Shape
{
    public:
      void  display_area()
    {
         area=x*y;
    }
      void display()
    {
        cout<<"Area of  Parallelogram is "<<area<<endl;
    }
};

int main()
{
    square r;
    r.get_data(5);
    r.display_area();
    r.display();
    parallelogram t;
    t.get_data(5,4);
    t.display_area();
    t.display();


    return 0;
}

             ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
